// Code generated by protoc-gen-go. DO NOT EDIT.
// source: compile.proto

/*
Package compile is a generated protocol buffer package.

It is generated from these files:
	compile.proto

It has these top-level messages:
	QueryFileFlagsReq
	QueryFileFlagsRep
	AddCompileDbReq
	AddCompileDbRep
*/
package compile

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type QueryFileFlagsReq struct {
	File string `protobuf:"bytes,1,opt,name=file" json:"file,omitempty"`
	Id   uint32 `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
}

func (m *QueryFileFlagsReq) Reset()                    { *m = QueryFileFlagsReq{} }
func (m *QueryFileFlagsReq) String() string            { return proto.CompactTextString(m) }
func (*QueryFileFlagsReq) ProtoMessage()               {}
func (*QueryFileFlagsReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *QueryFileFlagsReq) GetFile() string {
	if m != nil {
		return m.File
	}
	return ""
}

func (m *QueryFileFlagsReq) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryFileFlagsRep struct {
	Status uint32 `protobuf:"varint,1,opt,name=status" json:"status,omitempty"`
	Msg    string `protobuf:"bytes,2,opt,name=msg" json:"msg,omitempty"`
	Flags  string `protobuf:"bytes,3,opt,name=flags" json:"flags,omitempty"`
}

func (m *QueryFileFlagsRep) Reset()                    { *m = QueryFileFlagsRep{} }
func (m *QueryFileFlagsRep) String() string            { return proto.CompactTextString(m) }
func (*QueryFileFlagsRep) ProtoMessage()               {}
func (*QueryFileFlagsRep) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *QueryFileFlagsRep) GetStatus() uint32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *QueryFileFlagsRep) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *QueryFileFlagsRep) GetFlags() string {
	if m != nil {
		return m.Flags
	}
	return ""
}

type AddCompileDbReq struct {
	Path    string `protobuf:"bytes,2,opt,name=path" json:"path,omitempty"`
	Content string `protobuf:"bytes,1,opt,name=content" json:"content,omitempty"`
}

func (m *AddCompileDbReq) Reset()                    { *m = AddCompileDbReq{} }
func (m *AddCompileDbReq) String() string            { return proto.CompactTextString(m) }
func (*AddCompileDbReq) ProtoMessage()               {}
func (*AddCompileDbReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *AddCompileDbReq) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *AddCompileDbReq) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

type AddCompileDbRep struct {
	Status uint32 `protobuf:"varint,1,opt,name=status" json:"status,omitempty"`
	Msg    string `protobuf:"bytes,2,opt,name=msg" json:"msg,omitempty"`
}

func (m *AddCompileDbRep) Reset()                    { *m = AddCompileDbRep{} }
func (m *AddCompileDbRep) String() string            { return proto.CompactTextString(m) }
func (*AddCompileDbRep) ProtoMessage()               {}
func (*AddCompileDbRep) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *AddCompileDbRep) GetStatus() uint32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *AddCompileDbRep) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func init() {
	proto.RegisterType((*QueryFileFlagsReq)(nil), "compile.QueryFileFlagsReq")
	proto.RegisterType((*QueryFileFlagsRep)(nil), "compile.QueryFileFlagsRep")
	proto.RegisterType((*AddCompileDbReq)(nil), "compile.AddCompileDbReq")
	proto.RegisterType((*AddCompileDbRep)(nil), "compile.AddCompileDbRep")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CompileOptionServer service

type CompileOptionServerClient interface {
	QueryFileFlags(ctx context.Context, in *QueryFileFlagsReq, opts ...grpc.CallOption) (*QueryFileFlagsRep, error)
	AddCompileDb(ctx context.Context, in *AddCompileDbReq, opts ...grpc.CallOption) (*AddCompileDbRep, error)
}

type compileOptionServerClient struct {
	cc *grpc.ClientConn
}

func NewCompileOptionServerClient(cc *grpc.ClientConn) CompileOptionServerClient {
	return &compileOptionServerClient{cc}
}

func (c *compileOptionServerClient) QueryFileFlags(ctx context.Context, in *QueryFileFlagsReq, opts ...grpc.CallOption) (*QueryFileFlagsRep, error) {
	out := new(QueryFileFlagsRep)
	err := grpc.Invoke(ctx, "/compile.CompileOptionServer/QueryFileFlags", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *compileOptionServerClient) AddCompileDb(ctx context.Context, in *AddCompileDbReq, opts ...grpc.CallOption) (*AddCompileDbRep, error) {
	out := new(AddCompileDbRep)
	err := grpc.Invoke(ctx, "/compile.CompileOptionServer/AddCompileDb", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CompileOptionServer service

type CompileOptionServerServer interface {
	QueryFileFlags(context.Context, *QueryFileFlagsReq) (*QueryFileFlagsRep, error)
	AddCompileDb(context.Context, *AddCompileDbReq) (*AddCompileDbRep, error)
}

func RegisterCompileOptionServerServer(s *grpc.Server, srv CompileOptionServerServer) {
	s.RegisterService(&_CompileOptionServer_serviceDesc, srv)
}

func _CompileOptionServer_QueryFileFlags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFileFlagsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompileOptionServerServer).QueryFileFlags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/compile.CompileOptionServer/QueryFileFlags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompileOptionServerServer).QueryFileFlags(ctx, req.(*QueryFileFlagsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompileOptionServer_AddCompileDb_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCompileDbReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompileOptionServerServer).AddCompileDb(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/compile.CompileOptionServer/AddCompileDb",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompileOptionServerServer).AddCompileDb(ctx, req.(*AddCompileDbReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _CompileOptionServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "compile.CompileOptionServer",
	HandlerType: (*CompileOptionServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryFileFlags",
			Handler:    _CompileOptionServer_QueryFileFlags_Handler,
		},
		{
			MethodName: "AddCompileDb",
			Handler:    _CompileOptionServer_AddCompileDb_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "compile.proto",
}

func init() { proto.RegisterFile("compile.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 247 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4d, 0xce, 0xcf, 0x2d,
	0xc8, 0xcc, 0x49, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x87, 0x72, 0x95, 0xcc, 0xb9,
	0x04, 0x03, 0x4b, 0x53, 0x8b, 0x2a, 0xdd, 0x32, 0x73, 0x52, 0xdd, 0x72, 0x12, 0xd3, 0x8b, 0x83,
	0x52, 0x0b, 0x85, 0x84, 0xb8, 0x58, 0xd2, 0x32, 0x73, 0x52, 0x25, 0x18, 0x15, 0x18, 0x35, 0x38,
	0x83, 0xc0, 0x6c, 0x21, 0x3e, 0x2e, 0xa6, 0xcc, 0x14, 0x09, 0x26, 0x05, 0x46, 0x0d, 0xde, 0x20,
	0xa6, 0xcc, 0x14, 0xa5, 0x60, 0x4c, 0x8d, 0x05, 0x42, 0x62, 0x5c, 0x6c, 0xc5, 0x25, 0x89, 0x25,
	0xa5, 0xc5, 0x60, 0xad, 0xbc, 0x41, 0x50, 0x9e, 0x90, 0x00, 0x17, 0x73, 0x6e, 0x71, 0x3a, 0x58,
	0x37, 0x67, 0x10, 0x88, 0x29, 0x24, 0xc2, 0xc5, 0x9a, 0x06, 0xd2, 0x25, 0xc1, 0x0c, 0x16, 0x83,
	0x70, 0x94, 0xec, 0xb9, 0xf8, 0x1d, 0x53, 0x52, 0x9c, 0x21, 0x6e, 0x73, 0x49, 0x82, 0xba, 0xa5,
	0x20, 0xb1, 0x24, 0x03, 0xaa, 0x17, 0xcc, 0x16, 0x92, 0xe0, 0x62, 0x4f, 0xce, 0xcf, 0x2b, 0x49,
	0xcd, 0x2b, 0x81, 0x3a, 0x11, 0xc6, 0x55, 0xb2, 0x46, 0x37, 0x80, 0x04, 0x37, 0x19, 0x2d, 0x66,
	0xe4, 0x12, 0x86, 0x6a, 0xf5, 0x2f, 0x28, 0xc9, 0xcc, 0xcf, 0x0b, 0x4e, 0x2d, 0x2a, 0x4b, 0x2d,
	0x12, 0xf2, 0xe0, 0xe2, 0x43, 0xf5, 0xaa, 0x90, 0x94, 0x1e, 0x2c, 0x38, 0x31, 0x02, 0x4f, 0x0a,
	0xb7, 0x5c, 0x81, 0x90, 0x13, 0x17, 0x0f, 0xb2, 0xf3, 0x84, 0x24, 0xe0, 0x6a, 0xd1, 0xbc, 0x2d,
	0x85, 0x4b, 0xa6, 0x20, 0x89, 0x0d, 0x1c, 0x83, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x24,
	0x89, 0x0f, 0x41, 0xd2, 0x01, 0x00, 0x00,
}
