Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Unused terminals:

    STRUCT
    TYPE_DEFINE

Grammar

Rule 0     S' -> function
Rule 1     function -> FUNC NAME ( paramlist ) returnexpr
Rule 2     function -> FUNC NAME ( paramlist )
Rule 3     function -> FUNC NAME ( ) : returnexpr
Rule 4     function -> FUNC NAME ( )
Rule 5     paramlist -> param , paramlist
Rule 6     paramlist -> param
Rule 7     param -> NAME : TYPE
Rule 8     returnexpr -> TYPE

Terminals, with rules where they appear

(                    : 1 2 3 4
)                    : 1 2 3 4
,                    : 5
:                    : 3 7
FUNC                 : 1 2 3 4
NAME                 : 1 2 3 4 7
STRUCT               : 
TYPE                 : 7 8
TYPE_DEFINE          : 
error                : 

Nonterminals, with rules where they appear

function             : 0
param                : 5 6
paramlist            : 1 2 5
returnexpr           : 1 3

Parsing method: LALR

state 0

    (0) S' -> . function
    (1) function -> . FUNC NAME ( paramlist ) returnexpr
    (2) function -> . FUNC NAME ( paramlist )
    (3) function -> . FUNC NAME ( ) : returnexpr
    (4) function -> . FUNC NAME ( )

    FUNC            shift and go to state 1

    function                       shift and go to state 2

state 1

    (1) function -> FUNC . NAME ( paramlist ) returnexpr
    (2) function -> FUNC . NAME ( paramlist )
    (3) function -> FUNC . NAME ( ) : returnexpr
    (4) function -> FUNC . NAME ( )

    NAME            shift and go to state 3


state 2

    (0) S' -> function .



state 3

    (1) function -> FUNC NAME . ( paramlist ) returnexpr
    (2) function -> FUNC NAME . ( paramlist )
    (3) function -> FUNC NAME . ( ) : returnexpr
    (4) function -> FUNC NAME . ( )

    (               shift and go to state 4


state 4

    (1) function -> FUNC NAME ( . paramlist ) returnexpr
    (2) function -> FUNC NAME ( . paramlist )
    (3) function -> FUNC NAME ( . ) : returnexpr
    (4) function -> FUNC NAME ( . )
    (5) paramlist -> . param , paramlist
    (6) paramlist -> . param
    (7) param -> . NAME : TYPE

    )               shift and go to state 5
    NAME            shift and go to state 6

    param                          shift and go to state 8
    paramlist                      shift and go to state 7

state 5

    (3) function -> FUNC NAME ( ) . : returnexpr
    (4) function -> FUNC NAME ( ) .

    :               shift and go to state 9
    $end            reduce using rule 4 (function -> FUNC NAME ( ) .)


state 6

    (7) param -> NAME . : TYPE

    :               shift and go to state 10


state 7

    (1) function -> FUNC NAME ( paramlist . ) returnexpr
    (2) function -> FUNC NAME ( paramlist . )

    )               shift and go to state 11


state 8

    (5) paramlist -> param . , paramlist
    (6) paramlist -> param .

    ,               shift and go to state 12
    )               reduce using rule 6 (paramlist -> param .)


state 9

    (3) function -> FUNC NAME ( ) : . returnexpr
    (8) returnexpr -> . TYPE

    TYPE            shift and go to state 14

    returnexpr                     shift and go to state 13

state 10

    (7) param -> NAME : . TYPE

    TYPE            shift and go to state 15


state 11

    (1) function -> FUNC NAME ( paramlist ) . returnexpr
    (2) function -> FUNC NAME ( paramlist ) .
    (8) returnexpr -> . TYPE

    $end            reduce using rule 2 (function -> FUNC NAME ( paramlist ) .)
    TYPE            shift and go to state 14

    returnexpr                     shift and go to state 16

state 12

    (5) paramlist -> param , . paramlist
    (5) paramlist -> . param , paramlist
    (6) paramlist -> . param
    (7) param -> . NAME : TYPE

    NAME            shift and go to state 6

    param                          shift and go to state 8
    paramlist                      shift and go to state 17

state 13

    (3) function -> FUNC NAME ( ) : returnexpr .

    $end            reduce using rule 3 (function -> FUNC NAME ( ) : returnexpr .)


state 14

    (8) returnexpr -> TYPE .

    $end            reduce using rule 8 (returnexpr -> TYPE .)


state 15

    (7) param -> NAME : TYPE .

    ,               reduce using rule 7 (param -> NAME : TYPE .)
    )               reduce using rule 7 (param -> NAME : TYPE .)


state 16

    (1) function -> FUNC NAME ( paramlist ) returnexpr .

    $end            reduce using rule 1 (function -> FUNC NAME ( paramlist ) returnexpr .)


state 17

    (5) paramlist -> param , paramlist .

    )               reduce using rule 5 (paramlist -> param , paramlist .)

